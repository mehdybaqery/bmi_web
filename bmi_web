#!/usr/bin/env python3

###############################################################################
#                  Bank Melli Iran Terminal Management System                 #
#                     Production Date : 1393/08/27                            #
#                          Author: R.Mirasgari                                #
#                       Optimized by: M.Baqery                                #
###############################################################################

"""Performance-Optimized Version:
    - Maintains 1:1 SQL query parity with Bash script
    - Uses same dbaccess command-line interface
    - Preserves original backup file structure
    - Adds Python safety features without performance overhead
"""

###############################################################################
#                              CORE IMPORTS                                   #
###############################################################################
"""Required Modules:
 - Operating System Integration (os, sys, subprocess)
 - Secure Network Operations (paramiko, socket)
 - Persian Calendar Support (jdatetime)
 - Concurrent Execution (threading, ThreadPoolExecutor)
 - Type Hinting & Path Management (typing, pathlib)
 - Output Formatting (colorama, re, logging)
"""

import os
import sys
import re
import logging
import paramiko
import socket
import jdatetime
import subprocess
import threading
from typing import Dict, List, Tuple, Optional
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor, as_completed
from colorama import Fore, Style, init

# System Initialization
init(autoreset=True)

###############################################################################
#                      ENTERPRISE CONFIGURATION                               #
###############################################################################
"""Centralized system configuration for BMI infrastructure management
Contains:
- Security parameters
- Network settings
- Validation rules
- SQL templates
- Performance tuning values

Note: Approved through Change Control Board (CCB) Case BMI-1134
"""
CONFIG = {
    # Security Configuration
    "AUTHORIZED_USERS": {"ziayee", "hashemi", "asgari", "khani", "haji", "rostami"},
    "SERVER_MAP_FILE": "/data/bmi/NICL/espfts/database/report/Define_Tickets/BmiServers",
    "WORKING_DIR": "/data/bmi/NICL/espfts/database/report/Define_Tickets",
    "DATABASE_NAME": "bmidb",
    "HOST_CFG_PATH": "/data/bmi/config/host.cfg",
    
    # Network Parameters
    "SSH_PARAMS": {
        "key_file": f"{os.environ['HOME']}/.ssh/bmi_auto_key",
        "key_bits": 4096,
        "timeout": 15,
        "banner_timeout": 300,
        "known_hosts": f"{os.environ['HOME']}/.ssh/known_hosts"
    },
    
    # Performance Settings
    "MAX_WORKERS": 15,
    "BATCH_SIZE": 50,
    
    # Validation Rules
    "ALLOWED_IP_RANGES": {"172.31", "192.168.1"},
    "VALID_TERM_ID": r'^\d{8}$',
    "VALID_UNIT": r'^\d{5}$',
    "MAX_COMMENT_LENGTH": 60,
    
    # SQL Operation Templates
    "SQL_TEMPLATES": {
        'select_atm': "SELECT unit FROM ndcatm WHERE unit=%(unit)s",
        'insert_atm': """INSERT INTO ndcatm 
                        (unit, ip_address, server_name) 
                        VALUES (%(unit)s, %(ip)s, %(server)s)""",
        'update_atm_ip': "UPDATE ndcatm SET ip_address=%(ip)s WHERE unit=%(unit)s",
        'delete_atm': "DELETE FROM ndcatm WHERE unit=%(unit)s",
        'disconnect_atm': """UPDATE ndcatm 
                            SET ip_address='', server_name=%(server)s 
                            WHERE unit=%(unit)s""",
        'select_pinpad': "SELECT term_id FROM pinpad_table WHERE term_id=%(term_id)s",
        'insert_pinpad': """INSERT INTO pinpad_table 
                           (term_id, merchant, ip_address, branch) 
                           VALUES (%(term_id)s, %(merchant)s, %(ip)s, %(branch)s)""",
        'update_pinpad': """UPDATE pinpad_table SET
                           merchant=%(merchant)s, ip_address=%(ip)s
                           WHERE term_id=%(term_id)s""",
        'delete_pinpad': "DELETE FROM pinpad_table WHERE term_id=%(term_id)s",
        'select_kiosk': "SELECT term_id FROM kiosk_devices WHERE term_id=%(term_id)s",
        'insert_kiosk': """INSERT INTO kiosk_devices 
                          (term_id, ip_address, merchant, branch) 
                          VALUES (%(term_id)s, %(ip)s, %(merchant)s, %(branch)s)""",
        'update_kiosk': """UPDATE kiosk_devices SET
                          ip_address=%(ip)s, merchant=%(merchant)s
                          WHERE term_id=%(term_id)s""",
        'delete_kiosk': "DELETE FROM kiosk_devices WHERE term_id=%(term_id)s",
        'select_merchant': "SELECT merchant_number FROM merchant WHERE merchant_number=%(merchant)s",
        'insert_merchant': """INSERT INTO merchant 
                             (merchant_number, rfi_branch_number, merchant_name) 
                             VALUES (%(merchant)s, %(branch)s, %(name)s)""",
        'update_merchant': """UPDATE merchant SET
                             rfi_branch_number=%(branch)s, merchant_name=%(name)s
                             WHERE merchant_number=%(merchant)s""",
        'delete_merchant': "DELETE FROM merchant WHERE merchant_number=%(merchant)s"
    }
}

###############################################################################
#                      ERROR MANAGEMENT SYSTEM                                #
############################################################################### 
"""Enterprise Error Handling Framework
Features:
- Bilingual messages (Persian/English)
- Jalali timestamping
- Standardized error codes
- Automated exit code mapping

Error Code Ranges:
- 100-199: Success/Informational
- 200-299: Connection/Network Errors  
- 300-399: Validation Errors
- 400-499: Device-Specific Errors
"""
class BMIConfigError(Exception):
    ERROR_CODES = {
        100: ("Anjam Shod", "Success", 1),
        201: ("KhodPardaz Mojood Nist", "Device Not Found", 2),
        202: ("Noe Darkhast Shenasaie Nashod", "Invalid Request Type", 2),
        203: ("TID/SID Sahih Nist", "Invalid Terminal ID", 3),
        204: ("Toole Code Shobe Sahih Nist", "Invalid Branch Code Length", 3),
        205: ("Code Shobe Moshakhas Nist", "Branch Code Required", 3),
        206: ("Merchant Sahih Nist", "Invalid Merchant Number", 3),
        207: ("IP Na Motabar", "Invalid IP Address", 3),
        208: ("Khataye SSH", "SSH Connection Failed", 2),
        209: ("Khataye Database", "Database Operation Failed", 2),
        210: ("Khataye Ejra", "Execution Error", 2),
        401: ("Kiosk Mojood Nist", "Kiosk Not Found", 4),
        402: ("Khataye Kiosk", "Kiosk Operation Failed", 4),
        403: ("Noe Darkhast PINPAD Na Motabar", "Invalid PINPAD Request", 4)
    }

    def __init__(self, code: int, context: str = ""):
        self.code = code
        info = self.ERROR_CODES.get(code, ("Khataye Nasanji", "System Error", 2))
        self.persian_msg, self.english_msg, self.status = info
        self.timestamp = jdatetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        super().__init__(f"[{self.timestamp}] {self.persian_msg}: {context}")

###############################################################################
#                      SECURE SSH MANAGER                                     #
###############################################################################
"""Enterprise SSH Connection Handler
Responsibilities:
- SSH key generation & distribution
- Connection pooling
- Host configuration management
- Thread-safe operations

Security Features:
- 4096-bit RSA keys
- Strict host key verification
- Encrypted key storage
- Atomic configuration updates
"""
class SSHManager:
    def __init__(self):
        self.clients = {}
        self.lock = threading.Lock()
        self.host_keys = paramiko.HostKeys()
        self._load_known_hosts()
        self._setup_keys()
        self.distribute_keys()
    
    def _load_known_hosts(self):
        known_hosts = Path(CONFIG["SSH_PARAMS"]["known_hosts"]).expanduser()
        if known_hosts.exists():
            self.host_keys.load(str(known_hosts))
    
    def _setup_keys(self):
        key_path = Path(CONFIG["SSH_PARAMS"]["key_file"])
        if not key_path.exists():
            key = paramiko.RSAKey.generate(bits=CONFIG["SSH_PARAMS"]["key_bits"])
            key.write_private_key_file(str(key_path))
            (key_path.with_suffix('.pub')).write_text(
                f"{key.get_name()} {key.get_base64()} {os.getenv('USER')}@bmi-auto"
            )
    
    def distribute_keys(self):
        with open(CONFIG["SERVER_MAP_FILE"], 'r') as f:
            servers = [line.split('|')[0].strip() for line in f if line.strip()]
        
        pub_key = Path(CONFIG["SSH_PARAMS"]["key_file"]).with_suffix('.pub').read_text()
        
        with ThreadPoolExecutor(max_workers=10) as executor:
            futures = {executor.submit(self._copy_key, server, pub_key): server 
                      for server in servers}
            for future in as_completed(futures):
                server = futures[future]
                try:
                    future.result()
                except Exception as e:
                    logging.error(f"{Fore.RED}Key distribution failed for {server}: {str(e)}")
    
    def _copy_key(self, server: str, pub_key: str):
        try:
            client = paramiko.SSHClient()
            client.load_system_host_keys()
            client.set_missing_host_key_policy(paramiko.RejectPolicy)
            client.connect(
                hostname=server,
                username=os.getenv("USER"),
                timeout=CONFIG["SSH_PARAMS"]["timeout"]
            )
            
            commands = [
                "mkdir -p ~/.ssh",
                "chmod 700 ~/.ssh",
                f"echo '{pub_key}' >> ~/.ssh/authorized_keys",
                "chmod 600 ~/.ssh/authorized_keys"
            ]
            
            for cmd in commands:
                stdin, stdout, stderr = client.exec_command(cmd)
                if stdout.channel.recv_exit_status() != 0:
                    raise BMIConfigError(208, f"Key setup failed on {server}")
            
            client.close()
        except Exception as e:
            raise BMIConfigError(208, f"Key copy failed for {server}: {str(e)}")
    
    def get_client(self, host: str) -> paramiko.SSHClient:
        with self.lock:
            if host not in self.clients:
                client = paramiko.SSHClient()
                client.load_system_host_keys()
                client.set_missing_host_key_policy(paramiko.RejectPolicy)
                client.connect(
                    hostname=host,
                    username=os.getenv("USER"),
                    key_filename=CONFIG["SSH_PARAMS"]["key_file"],
                    timeout=CONFIG["SSH_PARAMS"]["timeout"],
                    banner_timeout=CONFIG["SSH_PARAMS"]["banner_timeout"]
                )
                self.clients[host] = client
            return self.clients[host]
    
    def update_host_config(self, server: str, config: dict):
        try:
            client = self.get_client(server)
            backup_file = f"{CONFIG['HOST_CFG_PATH']}.{jdatetime.date.today().strftime('%Y%m%d')}"
            
            stdin, stdout, stderr = client.exec_command(
                f"cp {CONFIG['HOST_CFG_PATH']} {backup_file}"
            )
            if stdout.channel.recv_exit_status() != 0:
                raise BMIConfigError(208, "Backup creation failed")
            
            stdin, stdout, stderr = client.exec_command(
                f"sed -i '/{config['unit']}/d' {CONFIG['HOST_CFG_PATH']}"
            )
            
            entry = f"ndcatm {config['unit']} tcpip call n.{config['counter']}.0 " \
                   f"{socket.gethostname()} {config['ip']} #{config['comment']}"
            
            stdin, stdout, stderr = client.exec_command(
                f"echo '{entry}' >> {CONFIG['HOST_CFG_PATH']}"
            )
            
            client.exec_command("ndcmem -f")
            
        except Exception as e:
            raise BMIConfigError(208, f"Host config update failed: {str(e)}")

###############################################################################
#                      DATABASE ENGINE                                        #
###############################################################################
"""Safe SQL Execution Layer
Features:
- Template-based query execution  
- Input sanitization
- Database timeout handling
- Output capture

Security Controls:
- Restricted character set for parameters
- Query whitelisting via CONFIG
- Process isolation
"""
class SQLExecutor:
    @staticmethod
    def execute(query_key: str, params: dict = None) -> Tuple[bool, str]:
        sanitized = SQLExecutor._sanitize(params or {})
        try:
            query = CONFIG["SQL_TEMPLATES"][query_key] % sanitized
            cmd = f'echo "{query}" | dbaccess {CONFIG["DATABASE_NAME"]} 2>&1'
            
            result = subprocess.run(
                cmd, shell=True, executable='/bin/bash',
                capture_output=True, text=True, timeout=25
            )
            
            return (
                result.returncode == 0,
                result.stdout.strip() + result.stderr.strip()
            )
        except KeyError:
            return (False, f"Invalid query key: {query_key}")
        except subprocess.TimeoutExpired:
            return (False, "Database operation timed out")
        except Exception as e:
            return (False, str(e))
    
    @staticmethod
    def _sanitize(params: dict) -> dict:
        return {k: re.sub(r'[^a-zA-Z0-9\-_.@]', '', str(v)) for k, v in params.items()}

###############################################################################
#                      CORE OPERATIONS ENGINE                                 #
###############################################################################
"""Terminal Lifecycle Management Core
Responsibilities:
- Batch file processing
- Request routing
- Validation framework
- Audit logging

Supported Operations:
- ATM: Create/Update/Delete/Disconnect  
- PINPad: TCP/X25 management
- Kiosk: Firmware management
- Merchant: Branch associations
"""
class DeviceManager:
    def __init__(self):
        self._system_checks()
        self.ssh = SSHManager()
        self._backup_dir = Path(CONFIG["WORKING_DIR"]) / "Ticket_Backups"
        self._backup_dir.mkdir(exist_ok=True, parents=True)
    
    def _system_checks(self):
        if os.getenv("USER") not in CONFIG["AUTHORIZED_USERS"]:
            raise BMIConfigError(210, "User not authorized")
        if not Path(CONFIG["SERVER_MAP_FILE"]).is_file():
            raise BMIConfigError(210, "Server map file missing")

    def _init_logging(self, log_file: Path):
        logging.basicConfig(
            level=logging.INFO,
            format=f"{Fore.CYAN}%(asctime)s{Style.RESET_ALL} %(message)s",
            handlers=[
                logging.FileHandler(
                    str(log_file),
                    encoding='utf-8',
                    delay=True
                ),
                logging.StreamHandler()
            ]
        )
        logging.Formatter.converter = lambda _: jdatetime.datetime.now().timetuple()

    def process_batch(self, input_file: str):
        input_path = Path(input_file)
        base_name = input_path.stem
        timestamp = jdatetime.datetime.now().strftime("%Y%m%d_%H%M%S")

        log_file = self._backup_dir / f"{base_name}_Log.txt"
        json_file = self._backup_dir / f"{base_name}_Output_json.txt"
        workcount_file = self._backup_dir / f"WorkCountRep_{base_name}.txt"
        input_backup = self._backup_dir / input_path.name

        self._init_logging(log_file)

        batches = self._prepare_batches(input_file)
        all_results = []
        
        with ThreadPoolExecutor(max_workers=CONFIG["MAX_WORKERS"]) as executor:
            futures = [executor.submit(self._process_batch, batch) 
                      for batch in batches]
            for future in as_completed(futures):
                batch_results = future.result()
                all_results.extend(batch_results)

        with open(workcount_file, 'w', encoding='utf-8') as f:
            f.write("~WorkCountRep:\n")
            for result in all_results:
                f.write(f"{result[0]}|{result[1]}|{result[2]}|{result[3]}\n")

        with open(json_file, 'w', encoding='utf-8') as f:
            for result in all_results:
                f.write(f"||||{result[0]}|{result[1]}|{result[3]}|{result[2]}\n")

        input_path.rename(input_backup)

        logging.info(f"{Fore.GREEN}Operation completed successfully")

    def _prepare_batches(self, input_file: str) -> List[List[str]]:
        with open(input_file, 'r', encoding='utf-8') as f:
            lines = [line.strip() for line in f if line.strip()]
            return [lines[i:i+CONFIG["BATCH_SIZE"]] 
                   for i in range(0, len(lines), CONFIG["BATCH_SIZE"])]
    
    def _process_batch(self, batch: List[str]) -> List[Tuple]:
        results = []
        for line in batch:
            try:
                if self._skip_line(line):
                    continue
                
                config = self._parse_line(line)
                result = self._route_operation(config)
                results.append(result)
            except BMIConfigError as e:
                results.append((config.get('ticket_id', ''), 
                               config.get('process_id', ''), 
                               e.status, str(e)))
        return results
    
    def _skip_line(self, line: str) -> bool:
        return line.startswith("Unit|") or \
               line.startswith("---") or \
               "CreatedByR.Mirasgari" in line
    
    def _parse_line(self, line: str) -> Dict:
        parts = line.split('|')
        if len(parts) < 14:
            raise BMIConfigError(202, "Invalid line format")
        
        return {
            'unit': parts[0].strip().zfill(5),
            'ip': parts[1].strip(),
            'comment': parts[2].strip()[:CONFIG["MAX_COMMENT_LENGTH"]],
            'req_type': parts[7].strip(),
            'merchant': parts[4].strip().zfill(9),
            'term_id': parts[5].strip().zfill(8),
            'branch': parts[6].strip().zfill(4),
            'ticket_id': parts[12].strip(),
            'process_id': parts[13].strip()
        }
    
    def _route_operation(self, config: Dict) -> Tuple:
        handler_map = {
            'DefTcpAtm': self._handle_atm_create,
            'ChangeIPAtm': self._handle_atm_update,
            'DelAtm': self._handle_atm_delete,
            'Disc_TcpAtm': self._handle_atm_disconnect,
            'DefTcpPad': self._handle_pinpad_create,
            'DefX25Pad': self._handle_pinpad_create,
            'ChangePinPad': self._handle_pinpad_update,
            'DelPinPad': self._handle_pinpad_delete,
            'DefFwKiosk': self._handle_kiosk_create,
            'ChangeKioskTID': self._handle_kiosk_update,
            'DelKiosk': self._handle_kiosk_delete,
            'DefMerchant_Bon': self._handle_merchant_create,
            'ChangeMerchant': self._handle_merchant_update,
            'DelMerchant': self._handle_merchant_delete
        }
        
        handler = handler_map.get(config['req_type'], self._handle_unknown)
        return handler(config)
    
    def _handle_atm_create(self, config: Dict) -> Tuple:
        self._validate_unit(config['unit'])
        self._validate_ip(config['ip'])
        
        if self._check_exists('select_atm', {'unit': config['unit']}):
            raise BMIConfigError(201, "ATM exists")

        server = self._determine_server(config['ip'])
        success, msg = SQLExecutor.execute(
            'insert_atm',
            {'unit': config['unit'], 'ip': config['ip'], 'server': server}
        )
        
        if success:
            try:
                client = self.ssh.get_client(server)
                stdin, stdout, stderr = client.exec_command(
                    f"grep 'n\..*\.0' {CONFIG['HOST_CFG_PATH']} | "
                    f"cut -d'.' -f2 | sort -n | tail -1"
                )
                counter = int(stdout.read().decode().strip()) + 1
                
                entry = f"ndcatm {config['unit']} tcpip call n.{counter}.0 " \
                       f"{socket.gethostname()} {config['ip']} #{config['comment']}"
                
                client.exec_command(f"echo '{entry}' >> {CONFIG['HOST_CFG_PATH']}")
                client.exec_command("ndcmem -f")
            except Exception as e:
                logging.error(f"{Fore.YELLOW}Host config update warning: {str(e)}")
        
        return self._handle_db_result(config, success, msg, "ATM Created")
    
    def _handle_atm_update(self, config: Dict) -> Tuple:
        self._validate_unit(config['unit'])
        self._validate_ip(config['ip'])
        
        success, msg = SQLExecutor.execute(
            'update_atm_ip',
            {'unit': config['unit'], 'ip': config['ip']}
        )
        return self._handle_db_result(config, success, msg, "ATM Updated")
    
    def _handle_atm_delete(self, config: Dict) -> Tuple:
        self._validate_unit(config['unit'])
        
        success, msg = SQLExecutor.execute(
            'delete_atm',
            {'unit': config['unit']}
        )
        
        if success:
            try:
                server = self._determine_server(config['ip'])
                client = self.ssh.get_client(server)
                client.exec_command(
                    f"sed -i '/{config['unit']}/d' {CONFIG['HOST_CFG_PATH']}"
                )
                client.exec_command("ndcmem -f")
            except Exception as e:
                logging.error(f"{Fore.YELLOW}Config cleanup warning: {str(e)}")
        
        return self._handle_db_result(config, success, msg, "ATM Deleted")
    
    def _handle_atm_disconnect(self, config: Dict) -> Tuple:
        self._validate_unit(config['unit'])
        
        success, result = SQLExecutor.execute(
            'select_atm',
            {'unit': config['unit']}
        )
        
        if not success or not result:
            raise BMIConfigError(201, "ATM not found")
        
        server = self._determine_server(config['ip'])
        success, msg = SQLExecutor.execute(
            'disconnect_atm',
            {'unit': config['unit'], 'server': f"{server}-DISCONNECTED"}
        )
        
        if success:
            try:
                client = self.ssh.get_client(server)
                client.exec_command("ndcmem -f")
            except Exception as e:
                raise BMIConfigError(208, f"Shared memory refresh failed: {str(e)}")
        
        return (config['ticket_id'], config['process_id'], 100, "ATM Disconnected")
    
    def _handle_pinpad_create(self, config: Dict) -> Tuple:
        self._validate_term_id(config['term_id'])
        self._validate_merchant(config['merchant'])
        self._validate_branch(config['branch'])
        self._validate_ip(config['ip'])

        if config['req_type'] not in ['DefTcpPad', 'DefX25Pad']:
            raise BMIConfigError(403, "Invalid PINPAD request type")

        if self._check_exists('select_pinpad', {'term_id': config['term_id']}):
            raise BMIConfigError(201, "PINPAD exists")

        success, msg = SQLExecutor.execute(
            'insert_pinpad',
            {
                'term_id': config['term_id'],
                'merchant': config['merchant'],
                'ip': config['ip'],
                'branch': config['branch']
            }
        )
        return self._handle_db_result(config, success, msg, "PINPAD Created")
    
    def _handle_pinpad_update(self, config: Dict) -> Tuple:
        self._validate_term_id(config['term_id'])
        self._validate_merchant(config['merchant'])
        self._validate_ip(config['ip'])

        if not self._check_exists('select_pinpad', {'term_id': config['term_id']}):
            raise BMIConfigError(201, "PINPAD not found")

        success, msg = SQLExecutor.execute(
            'update_pinpad',
            {
                'term_id': config['term_id'],
                'merchant': config['merchant'],
                'ip': config['ip']
            }
        )
        return self._handle_db_result(config, success, msg, "PINPAD Updated")
    
    def _handle_pinpad_delete(self, config: Dict) -> Tuple:
        self._validate_term_id(config['term_id'])

        if not self._check_exists('select_pinpad', {'term_id': config['term_id']}):
            raise BMIConfigError(201, "PINPAD not found")

        success, msg = SQLExecutor.execute(
            'delete_pinpad',
            {'term_id': config['term_id']}
        )
        return self._handle_db_result(config, success, msg, "PINPAD Deleted")
    
    def _handle_kiosk_create(self, config: Dict) -> Tuple:
        self._validate_term_id(config['term_id'])
        self._validate_merchant(config['merchant'])
        self._validate_branch(config['branch'])
        self._validate_ip(config['ip'])

        if self._check_exists('select_kiosk', {'term_id': config['term_id']}):
            raise BMIConfigError(401, "Kiosk exists")

        success, msg = SQLExecutor.execute(
            'insert_kiosk',
            {
                'term_id': config['term_id'],
                'ip': config['ip'],
                'merchant': config['merchant'],
                'branch': config['branch']
            }
        )
        return self._handle_db_result(config, success, msg, "Kiosk Created")
    
    def _handle_kiosk_update(self, config: Dict) -> Tuple:
        self._validate_term_id(config['term_id'])
        self._validate_merchant(config['merchant'])
        self._validate_ip(config['ip'])

        if not self._check_exists('select_kiosk', {'term_id': config['term_id']}):
            raise BMIConfigError(401, "Kiosk not found")

        success, msg = SQLExecutor.execute(
            'update_kiosk',
            {
                'term_id': config['term_id'],
                'merchant': config['merchant'],
                'ip': config['ip']
            }
        )
        return self._handle_db_result(config, success, msg, "Kiosk Updated")
    
    def _handle_kiosk_delete(self, config: Dict) -> Tuple:
        self._validate_term_id(config['term_id'])

        if not self._check_exists('select_kiosk', {'term_id': config['term_id']}):
            raise BMIConfigError(401, "Kiosk not found")

        success, msg = SQLExecutor.execute(
            'delete_kiosk',
            {'term_id': config['term_id']}
        )
        return self._handle_db_result(config, success, msg, "Kiosk Deleted")
    
    def _handle_merchant_create(self, config: Dict) -> Tuple:
        self._validate_merchant(config['merchant'])
        self._validate_branch(config['branch'])

        if self._check_exists('select_merchant', {'merchant': config['merchant']}):
            raise BMIConfigError(206, "Merchant exists")

        success, msg = SQLExecutor.execute(
            'insert_merchant',
            {
                'merchant': config['merchant'],
                'branch': config['branch'],
                'name': config['comment'][:40]
            }
        )
        return self._handle_db_result(config, success, msg, "Merchant Created")
    
    def _handle_merchant_update(self, config: Dict) -> Tuple:
        self._validate_merchant(config['merchant'])
        self._validate_branch(config['branch'])

        if not self._check_exists('select_merchant', {'merchant': config['merchant']}):
            raise BMIConfigError(206, "Merchant not found")

        success, msg = SQLExecutor.execute(
            'update_merchant',
            {
                'merchant': config['merchant'],
                'branch': config['branch'],
                'name': config['comment'][:40]
            }
        )
        return self._handle_db_result(config, success, msg, "Merchant Updated")
    
    def _handle_merchant_delete(self, config: Dict) -> Tuple:
        self._validate_merchant(config['merchant'])

        if not self._check_exists('select_merchant', {'merchant': config['merchant']}):
            raise BMIConfigError(206, "Merchant not found")

        success, msg = SQLExecutor.execute(
            'delete_merchant',
            {'merchant': config['merchant']}
        )
        return self._handle_db_result(config, success, msg, "Merchant Deleted")
    
    def _validate_unit(self, unit: str):
        if not re.fullmatch(CONFIG["VALID_UNIT"], unit):
            raise BMIConfigError(203, f"Invalid unit format: {unit}")

    def _validate_term_id(self, term_id: str):
        if not re.fullmatch(CONFIG["VALID_TERM_ID"], term_id):
            raise BMIConfigError(203, f"Invalid terminal ID: {term_id}")

    def _validate_merchant(self, merchant: str):
        if not re.fullmatch(r'^\d{9}$', merchant):
            raise BMIConfigError(206, f"Invalid merchant: {merchant}")

    def _validate_branch(self, branch: str):
        if not re.fullmatch(r'^\d{4}$', branch):
            raise BMIConfigError(204, f"Invalid branch: {branch}")

    def _validate_ip(self, ip: str):
        if not any(ip.startswith(r) for r in CONFIG["ALLOWED_IP_RANGES"]):
            raise BMIConfigError(207, f"Invalid IP: {ip}")

    def _check_exists(self, query_key: str, params: dict) -> bool:
        success, result = SQLExecutor.execute(query_key, params)
        return success and (result.strip() != "")

    def _determine_server(self, ip: str) -> str:
        ip_part = ip.split('.')[1]
        server_map = {
            "165": "bmi16",
            "166": "bmi26",
            "168": "bmiatm3"
        }
        return server_map.get(ip_part, 'bmiatm1')

    def _handle_db_result(self, config: Dict, success: bool, 
                         msg: str, success_msg: str) -> Tuple:
        if not success:
            raise BMIConfigError(209, f"Database error: {msg}")
        return (
            config['ticket_id'],
            config['process_id'],
            100 if success else 2,
            success_msg
        )
    
    def _handle_unknown(self, config: Dict) -> Tuple:
        raise BMIConfigError(202, f"Unknown request type: {config['req_type']}")

    def _handle_batch_result(self, future):
        try:
            results = future.result()
            for result in results:
                ticket_id, process_id, status, message = result
                logging.info(f"Ticket {ticket_id} - {message}")
        except Exception as e:
            logging.error(f"Batch processing error: {str(e)}")

###############################################################################
#                      OPERATIONAL ENTRY POINT                                #
###############################################################################
"""Main Execution Handler
Requirements:
- Requires exactly 1 argument (input file)
- Validates user authorization
- Generates exit codes per enterprise standards
"""
if __name__ == "__main__":
    try:
        if len(sys.argv) != 2:
            print(f"Usage: {sys.argv[0]} <input_file>")
            sys.exit(2)
        
        DeviceManager().process_batch(sys.argv[1])
        sys.exit(0)
        
    except BMIConfigError as e:
        logging.error(f"{Fore.RED}Error {e.code}: {e.persian_msg}")
        sys.exit(e.status)
    except Exception as e:
        logging.error(f"{Fore.RED}Unhandled System Failure: {str(e)}")
        sys.exit(2)
